import asyncio
from sys import platform

import pyrogram
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

import config
from bot import bot
from database.admin import Admin_data_class
from database.chats import Chat_data_class
from database.stat_word import Stat_data_class
from other import func
from other import keyboard
from state.states import *

if platform == 'win32':
    string_key_word = 'data\\key_word.txt'
    string_dop_word = 'data\\dop_word.txt'
    string_stat = 'data\\stat.txt'
else:
    string_key_word = 'data/key_word.txt'
    string_dop_word = 'data/dop_word.txt'
    string_stat = 'data/stat.txt'

Admin_data = Admin_data_class()
Chat_data = Chat_data_class()
Stat_data = Stat_data_class()

client_pyrogram = pyrogram.Client("my_account", config.API_ID, config.API_HASH)


@client_pyrogram.on_message(pyrogram.filters.chat(Chat_data.get_chat_id()))
async def my_handler(client: pyrogram.Client, message: pyrogram.types.Message):
    chat_id = message.chat.id
    message_id = message.id
    try:
        username = message.chat.username
        link = f't.me/{username}/{message_id}'
    except:
        link = f't.me/{str(chat_id).replace("-100", "")}/{message_id}'

    await asyncio.sleep(10)
    check_msg = await client.get_messages(chat_id, message_id)
    message_text = check_msg.text

    if message_text == None or check_msg.from_user.is_bot:
        return
    result = func.check_text(message_text)
    if result:
        await bot.send_message(config.CHAT_ID, f'<b>–ù–∞—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:</b>\n\n'
                                               f'–°—Å—ã–ª–∫–∞: {link}\n'
                                               f'–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {result[1]}\n'
                                               f'–û—Ç–ø—Ä–∞–≤–∏–ª: {check_msg.from_user.first_name} - @{check_msg.from_user.username}\n'
                                               f'–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Çüëá', parse_mode='HTML',
                               reply_markup=keyboard.rating_key_word(result[1]),
                               disable_web_page_preview=True)
        await bot.send_message(config.CHAT_ID, message_text)


async def show_panel(message: Message, state: FSMContext):
    '''–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'''
    await state.finish()
    user_id = message.from_user.id
    if user_id in Admin_data.get_admins():
        await message.answer('–í–æ—Ç —Ç–≤–æ—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=keyboard.admin_panel())


async def rating_word(call: CallbackQuery, state: FSMContext):
    '''–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º'''
    await state.finish()
    user_id = call.from_user.id
    if user_id in Admin_data.get_admins():
        rating = call.data.split('_')[0]
        word = call.data.split('_')[1]
        Stat_data.add_word(word)
        if rating == 'bad':
            Stat_data.plus_bad(word)
            await call.answer(f'–¢—ã üëé —Å–ª–æ–≤–æ {word}')
        elif rating == 'good':
            Stat_data.plus_good(word)
            await call.answer(f'–¢—ã üëç —Å–ª–æ–≤–æ {word}')


async def get_rating_word(call: CallbackQuery, state: FSMContext):
    '''–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ª–æ–≤–∞–º'''
    await state.finish()
    user_id = call.from_user.id
    if user_id in Admin_data.get_admins():
        Stat_data.update_stat()
        await call.bot.send_document(user_id, open(string_stat, 'rb'))


async def change_key_word(call: CallbackQuery, state: FSMContext):
    '''–ú–µ–Ω—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'''
    await call.answer()
    await state.finish()
    user_id = call.from_user.id
    if user_id in Admin_data.get_admins():
        await call.message.answer('–ü—Ä–∏—à–ª–∏ txt —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n\n'
                                  '–°–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')
        await FSM_KEY_WORD.file.set()


async def change_key_word2(message: Message, state: FSMContext):
    '''–ú–µ–Ω—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏)'''
    user_id = message.from_user.id
    if user_id in Admin_data.get_admins():
        if message.content_type == 'document':
            await message.document.download(string_key_word)
            await message.answer('–ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
            await state.finish()
        else:
            await message.answer('–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª')


async def get_key_word(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.answer()
    user_id = call.from_user.id
    if user_id in Admin_data.get_admins():
        with open(string_key_word, 'rb') as file:
            await call.bot.send_document(user_id, file)


async def change_dop_word(call: CallbackQuery, state: FSMContext):
    '''–ú–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞'''
    await call.answer()
    await state.finish()
    user_id = call.from_user.id
    if user_id in Admin_data.get_admins():
        await call.message.answer('–ü—Ä–∏—à–ª–∏ txt —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞\n\n'
                                  '–°–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')
        await FSM_DOP_WORD.file.set()


async def change_dop_word2(message: Message, state: FSMContext):
    '''–ú–µ–Ω—è–µ–º –¥–æ–ø —Å–ª–æ–≤–∞ (–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –¥–æ–ø —Å–ª–æ–≤–∞–º–∏)'''
    user_id = message.from_user.id
    if user_id in Admin_data.get_admins():
        if message.content_type == 'document':
            await message.document.download(string_dop_word)
            await message.answer('–ù–æ–≤—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
            await state.finish()
        else:
            await message.answer('–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª')


async def get_dop_word(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.answer()
    user_id = call.from_user.id
    if user_id in Admin_data.get_admins():
        with open(string_dop_word, 'rb') as file:
            await call.bot.send_document(user_id, file)


async def add_chat(call: CallbackQuery, state: FSMContext):
    '''–î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç'''
    await call.answer()
    await state.finish()
    user_id = call.from_user.id
    if user_id in Admin_data.get_admins():
        await call.message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª')
        await FSM_ADD_CHAT.chat.set()


async def add_chat2(message: Message, state: FSMContext):
    '''–î–æ–±–∞–≤—è–ª–µ–º —á–∞—Ç (–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è)'''
    user_id = message.from_user.id
    if user_id in Admin_data.get_admins():
        try:
            await client_pyrogram.join_chat(message.text)  # –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
            chat = await client_pyrogram.get_chat(message.text)
            Chat_data.add_chat(chat.id, message.text)
            await message.answer(f'–ö–∞–Ω–∞–ª {chat.title} –¥–æ–±–∞–≤–ª–µ–Ω')
            await state.finish()
        except Exception as e:
            await message.answer(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª {e}')
            await state.finish()


async def del_chat(call: CallbackQuery, state: FSMContext):
    '''–£–¥–∞–ª—è–µ–º —á–∞—Ç'''
    await call.answer()
    await state.finish()
    user_id = call.from_user.id
    if user_id in Admin_data.get_admins():
        await call.message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å')
        await FSM_DELETE_CHAT.chat.set()


async def del_chat2(message: Message, state: FSMContext):
    '''–£–¥–∞–ª—è–µ–º —á–∞—Ç (—É–±–∏—Ä–∞–µ–º –∏–∑ –±–¥ –∏ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è)'''
    user_id = message.from_user.id
    if user_id in Admin_data.get_admins():
        try:
            chat = await client_pyrogram.get_chat(message.text)
            await client_pyrogram.leave_chat(chat.id)  # —É–¥–∞–ª—è–µ–º —á–∞—Ç
            Chat_data.del_chat(chat.id)
            await message.answer(f'–ö–∞–Ω–∞–ª {chat.title} —É–¥–∞–ª–µ–Ω')
            await state.finish()
        except Exception as e:
            await message.answer(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {e}')
            await state.finish()


async def get_chats(call: CallbackQuery, state: FSMContext):
    '''–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤'''
    await call.answer()
    await state.finish()
    user_id = call.from_user.id
    if user_id in Admin_data.get_admins():
        data = Chat_data.get_chat()
        text = '–í—Å–µ —á–∞—Ç—ã\n\n'
        for link in data:
            text += f'{link}\n'
        await call.message.answer(text)


async def add_admin(call: CallbackQuery, state: FSMContext):
    '''–î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞'''
    await call.answer()
    await state.finish()
    user_id = call.from_user.id
    if user_id in Admin_data.get_admins():
        await FSM_ADD_ADMIN.admin_id.set()
        await call.message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞')

async def add_admin2(message: Message, state: FSMContext):
    '''–î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞'''
    user_id = message.from_user.id
    if user_id in Admin_data.get_admins():
        if message.text.isdigit():
            Admin_data.add_admin(int(message.text))
            await message.answer('–ù–æ–≤—ã–π –∞–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω')
            await state.finish()
        else:
            await message.answer('–ù—É–∂–Ω–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!!\n'
                                 '–ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞ –≤ –±–æ—Ç–∞ https://t.me/getmyid_bot')
            await state.finish()


async def del_admin(call: CallbackQuery, state: FSMContext):
    '''–£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞'''
    await call.answer()
    await state.finish()
    user_id = call.from_user.id
    if user_id in Admin_data.get_admins():
        await FSM_DEL_ADMIN.admin_id.set()
        await call.message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ id –∞–¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å')

async def del_admin2(message: Message, state: FSMContext):
    '''–£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞'''
    user_id = message.from_user.id
    if user_id in Admin_data.get_admins():
        if message.text.isdigit():
            Admin_data.del_admin(int(message.text))
            await message.answer('–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω')
            await state.finish()
        else:
            await message.answer('–ù—É–∂–Ω–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!!\n'
                                 '–ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞ –≤ –±–æ—Ç–∞ https://t.me/getmyid_bot')
            await state.finish()


client_pyrogram.start()


def register_admin(dp: Dispatcher):
    dp.register_message_handler(show_panel, commands='panel', state='*')
    dp.register_callback_query_handler(rating_word,
                                       lambda call: call.data.startswith('good_') or call.data.startswith('bad_'),
                                       state='*')
    dp.register_callback_query_handler(get_rating_word, lambda call: call.data == 'get_stat_words', state='*')

    dp.register_callback_query_handler(change_key_word, lambda call: call.data == 'set_key_words', state='*')
    dp.register_message_handler(change_key_word2, content_types=['document', 'text'], state=FSM_KEY_WORD.file)
    dp.register_callback_query_handler(get_key_word, lambda call: call.data == 'get_key_words', state='*')

    dp.register_callback_query_handler(change_dop_word, lambda call: call.data == 'set_dop_words', state='*')
    dp.register_message_handler(change_dop_word2, content_types=['document', 'text'], state=FSM_DOP_WORD.file)
    dp.register_callback_query_handler(get_dop_word, lambda call: call.data == 'get_dop_words', state='*')

    dp.register_callback_query_handler(add_chat, lambda call: call.data == 'add_chat', state='*')
    dp.register_message_handler(add_chat2, state=FSM_ADD_CHAT.chat)
    dp.register_callback_query_handler(del_chat, lambda call: call.data == 'del_chat', state='*')
    dp.register_message_handler(del_chat2, state=FSM_DELETE_CHAT.chat)
    dp.register_callback_query_handler(get_chats, lambda call: call.data == 'get_chat', state='*')

    dp.register_callback_query_handler(add_admin, lambda call: call.data == 'add_admin', state='*')
    dp.register_message_handler(add_admin2, state=FSM_ADD_ADMIN.admin_id)

    dp.register_callback_query_handler(del_admin, lambda call: call.data == 'del_admin', state='*')
    dp.register_message_handler(del_admin2, state=FSM_DEL_ADMIN.admin_id)
